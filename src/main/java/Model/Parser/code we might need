 private int isRange(String[] splitted, int j) {
        String first = null;
        String second = null;
        String third = null;
        if (j < splitted.length) {
            if (splitted[j - 1].charAt(splitted[j - 1].length() - 1) == '-') {//A-??
                first = splitted[j - 1].substring(0, splitted[j - 1].length() - 1);
                if (splitted[j].charAt(splitted[j].length() - 1) == '-') {
                    second = splitted[j].substring(0, splitted[j].length() - 1);
                    if (j + 1 < splitted.length) {
                        if (splitted[j + 1].contains("-")) {
                            if (splitted[j + 1].length() > 1) {
                                third = splitted[j + 1].substring(0, splitted[j + 1].indexOf('-'));
                                splitted[j + 1] = splitted[j + 1].substring(splitted[j + 1].indexOf('-') + 1);
                            }
                            indexer.addWord(new Range(first, second, third));// A- B- C-
                            return 2;
                        } else {
                            third = splitted[j + 1];
                            indexer.addWord(new Range(first, second, third));//A- B- C
                            return 3;
                        }
                    }
                } else {
                    second = splitted[j];
                    if (j + 1 < splitted.length) {
                        if (splitted[j + 1].equals("-")) {
                            if (j + 2 < splitted.length) {
                                if (splitted[j + 2].contains("-")) {
                                    if (splitted[j + 2].length() > 1) {
                                        third = splitted[j + 2].substring(0, splitted[j + 2].indexOf('-'));
                                        splitted[j + 2] = splitted[j + 2].substring(splitted[j + 2].indexOf('-') + 1);
                                    }
                                    indexer.addWord(new Range(first, second, third));
                                    return 3;
                                } else {
                                    third = splitted[j + 2];
                                    indexer.addWord(new Range(first, second, third));
                                    return 4;
                                }
                            }
                        }
                    }
                }
            } else if (splitted[j].equals("-")) {
                first = splitted[j - 1];
                if (j + 1 < splitted.length) {
                    if (splitted[j + 1].charAt(splitted[j + 1].length() - 1) == '-') {
                        second = splitted[j + 1].substring(0, splitted[j + 1].length() - 1);
                        if (j + 2 < splitted.length) {
                            if (splitted[j + 2].contains("-")) {
                                if (splitted[j + 2].length() > 1) {
                                    third = splitted[j + 2].substring(0, splitted[j + 2].indexOf('-'));
                                    splitted[j + 2] = splitted[j + 2].substring(splitted[j + 2].indexOf('-') + 1);
                                }
                                indexer.addWord(new Range(first, second, third));
                                return 3;
                            } else {
                                third = splitted[j + 2];
                                indexer.addWord(new Range(first, second, third));
                                return 4;
                            }
                        }
                    } else {
                        second = splitted[j + 1];
                        if (j + 2 < splitted.length) {
                            if (splitted[j + 2].equals("-")) {
                                if (j + 3 < splitted.length) {
                                    if (splitted[j + 3].contains("-")) {
                                        if (splitted[j + 3].length() > 1) {
                                            third = splitted[j + 3].substring(0, splitted[j + 3].indexOf('-'));
                                            splitted[j + 3] = splitted[j + 3].substring(splitted[j + 3].indexOf('-') + 1);
                                        }
                                        indexer.addWord(new Range(first, second, third));
                                        return 4;
                                    } else {
                                        third = splitted[j + 3];
                                        indexer.addWord(new Range(first, second, third));
                                        return 5;
                                    }
                                }
                            }
                            else {

                            }
                        }
                    }
                }
            } else if (splitted[j].charAt(0) == '-') {

            } else return 0;
        } else return 0;
        return 0;
    }



     else if (isNumeric(splitted[i])) {
                    //here we need to parse Numeric value, same flow as WordsToNumber parsing, need to usr this code somehow, extract methods and shit.
                    double value = 0;
                    value = Double.parseDouble(splitted[i]);
                    i++;
                    if (i < splitted.length && (splitted[i].equalsIgnoreCase("point") || splitted[i].equals("."))) {
                        i++;
                        StringBuilder afterPointNum = new StringBuilder();
                        while (i < splitted.length && (isNumeric(splitted[i]) || splitted[i].length() == 0)) {
                            afterPointNum.append(splitted[i]);
                            i++;
                        }
                        if (afterPointNum.length() > 0) {
                            int afterPointValue = Integer.parseInt(afterPointNum.toString());
                            if (afterPointValue <= 9) {
                                value += afterPointValue / 10.0;
                            } else if (value <= 99) {
                                value += afterPointValue / 100.0;
                            }
                        }
                    }
                    StringBuilder millionValue = new StringBuilder();
                    while (i < splitted.length && (splitted[i].length() == 0 || splitted[i].equals(" "))) {
                        if (WordsToNumber.getAllowedStrings().contains(splitted[i])) {
                            millionValue.append(splitted[i]);
                        }
                        i++;
                    }
                    if (millionValue.length() >= 0) {
                        value *= wordsToNumber.execute(millionValue.toString());
                    }

                    String sign = "#";
                    if (i < splitted.length && (splitted[i].equalsIgnoreCase("%") ||
                            splitted[i].equalsIgnoreCase("percent") ||
                            splitted[i].equalsIgnoreCase("percentage"))) {
                        sign = "%";
                        i++;
                    }
                    if (i < splitted.length && (splitted[i].equalsIgnoreCase("$") ||
                            splitted[i].equalsIgnoreCase("dollars") ||
                            (splitted[i].equalsIgnoreCase("U.S.") && i + 1 < splitted.length && splitted[i + 1].equalsIgnoreCase("dollars")))) {
                        if (splitted[i].equalsIgnoreCase("U.S.") && i + 1 < splitted.length && splitted[i + 1].equalsIgnoreCase("dollars")) {
                            i += 2;
                            sign = "$";
                        } else {
                            sign = "$";
                            i++;
                        }

                    }
                    indexer.addWord(new Number(value, sign));
                    numberOfParsePhrases++;
                } else if (WordsToNumber.getAllowedStrings().contains(splitted[i].toLowerCase())) {
                    double value = 0;
                    StringBuilder number = new StringBuilder();
                    while (i < splitted.length && WordsToNumber.getAllowedStrings().contains(splitted[i])) {
                        number.append(splitted[i]).append(" ");
                        i++;
                    }
                    if (i < splitted.length && splitted[i].equalsIgnoreCase("point")) {
                        i++;
                        StringBuilder afterPointNumber = new StringBuilder();
                        while (i < splitted.length && WordsToNumber.getAllowedStrings().contains(splitted[i])) {
                            afterPointNumber.append(splitted[i]).append(" ");
                            i++;
                            if (splitted[i].equalsIgnoreCase("and")) {
                                i++;
                            }
                        }
                        value = wordsToNumber.execute(afterPointNumber.toString());
                        if (value <= 9) {
                            value /= 10;
                        } else if (value <= 99) {
                            value /= 100;
                        }
                    }
                    value += wordsToNumber.execute(number.toString());
                    String sign = "#";
                    if (i < splitted.length && (splitted[i].equalsIgnoreCase("%") ||
                            splitted[i].equalsIgnoreCase("percent") ||
                            splitted[i].equalsIgnoreCase("percentage"))) {
                        sign = "%";
                        i++;
                    }
                    if (i < splitted.length && (splitted[i].equalsIgnoreCase("$") ||
                            splitted[i].equalsIgnoreCase("dollars") ||
                            (splitted[i].equalsIgnoreCase("U.S.") && i + 1 < splitted.length && splitted[i + 1].equalsIgnoreCase("dollars")))) {
                        if (splitted[i].equalsIgnoreCase("U.S.") && i + 1 < splitted.length && splitted[i + 1].equalsIgnoreCase("dollars")) {
                            i += 2;
                            sign = "$";
                        } else {
                            sign = "$";
                            i++;
                        }
                    }

                    indexer.addWord(new Number(value, sign));
                    numberOfParsePhrases++;
                }


